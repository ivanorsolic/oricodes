<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ori Engineering</title>
    <link>https://ori.engineering/</link>
    <description>Recent content on Ori Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ori.engineering/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Parts: an overview</title>
      <link>https://ori.engineering/rc-car/parts_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ori.engineering/rc-car/parts_list/</guid>
      <description>There’s a lot of, and I mean a lot of parts when it comes to building an RC car on your own. But in the context of building a self-driving RC car, here’s a brief overview of some of the stuff we’ll need:
You&#39;ll want to have:  A RC car (with some batteries) A PWM/Servo Driver (I2C + some jumper cables) A Jetson Nano A powerbank (+ some usb cables) A microSD card (and optionally an external SSD) A WiFi/BT m.</description>
    </item>
    
    <item>
      <title>Scale</title>
      <link>https://ori.engineering/rc-car/scale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ori.engineering/rc-car/scale/</guid>
      <description> Most RC cars are scaled down versions of their real-life equivalent, so they&#39;re expressed in ratios, the most common ones being (real-life size : RC model size):
  1:18 1:16 1:10 1:8 there are also all sorts of scales in between those (and above/below)  Of course, the question is: why do we care, and what&#39;s better for a self-driving RC car?
It&#39;s pretty simple:
 a bigger RC car equals more real estate and more power to carry all of our gadgets on top of it, without damaging the motors while struggling with all of the weight, but a bigger car needs a bigger race track and road size we want to drive it on  </description>
    </item>
    
    <item>
      <title>RC Car body types</title>
      <link>https://ori.engineering/rc-car/body_type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ori.engineering/rc-car/body_type/</guid>
      <description>The best body type for on road self-driving purposes is the standard race body type.
 But to be thorough, we could roughly group all of the RC cars in 4 distinct categories:
RACE/STREET Probably the first thing that comes to mind when thinking of an RC car, a standard race car. This body type is the fastest and the best on paved, flat surfaces and is meant for on road use only.</description>
    </item>
    
    <item>
      <title>Electric motors</title>
      <link>https://ori.engineering/rc-car/electric_motors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ori.engineering/rc-car/electric_motors/</guid>
      <description>The main question concerning electric motors is: brushed or brushless?   Brushed pros: cheaper, simpler, better for off-road.
  Brushed cons: heavier, bigger, worse power efficiency (75-80%), they wear out in time.
  Brushless pros: long lifespan, much better speed and handling, better power efficiency (85-90%).
  Brushless cons: much more expensive, worse for off-road.
  So what should we get? It depends on your budget, but brushed motors work just fine, and besides, for self-driving purposes, you don’t need a RC car that drives 100 KPH.</description>
    </item>
    
    <item>
      <title>Steering servo</title>
      <link>https://ori.engineering/rc-car/servo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ori.engineering/rc-car/servo/</guid>
      <description>An RC servo is used for controlling the steering wheels of the car. It almost always comes with the RC car, so you shouldn’t worry about getting one.
It typically expects around 4.8V to 6V input on the power wire (varies by car) and a PWM control signal on the signal wire. Typically, the three wires are colored black-red-white, or brown-red-yellow, where:
 the dark wire (black/brown) is ground, and the center wire (red) is power, and the light wire (white/yellow) is control.</description>
    </item>
    
    <item>
      <title>Electronic Speed Controller</title>
      <link>https://ori.engineering/rc-car/electronic_speed_controller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ori.engineering/rc-car/electronic_speed_controller/</guid>
      <description>The role of the ESC is to take a RC PWM control signal (pulse between 1000 and 2000 microseconds) in, and use that to control the power to the motor so the motor spins with different amounts of power in forward or reverse. Many RC car kits come with an ESC preinstalled, in which case you should be just fine.
Again, 1500 microseconds typically means &amp;ldquo;center&amp;rdquo; which for the motor means &amp;ldquo;dead stop.</description>
    </item>
    
    <item>
      <title>Receiver</title>
      <link>https://ori.engineering/rc-car/receiver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ori.engineering/rc-car/receiver/</guid>
      <description>If you buy a &amp;ldquo;kit car&amp;rdquo; that is listed as &amp;ldquo;needs a receiver,&amp;rdquo; then you don&#39;t need to buy a receiver.
 The Jetson Nano and the PWM/Servo driver will replace the receiver, outputting control signals to the car. If you’re buying a kit with a steering servo, motor, and ESC, you should actually try to not get a receiver, since the RC car could be specifically designed for that receivers PWM signals, and you’ll be taking it apart anyways.</description>
    </item>
    
    <item>
      <title>Batteries</title>
      <link>https://ori.engineering/rc-car/batteries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ori.engineering/rc-car/batteries/</guid>
      <description>There are two types of batteries used for RC cars: Nickel Metal Hydride batteries (NiMH) and Lithium Polymer batteries (LiPo).
TL;DR: LiPo batteries are much better, but also more expensive.
Lithium Polymer batteries generally have higher current capacity (the amount of Amps the battery can deliver at one point while driving) as well as energy storage (the number of Amp Hours the battery stores when fully charged) so it may also last longer.</description>
    </item>
    
    <item>
      <title>DonkeyCar installation</title>
      <link>https://ori.engineering/host-pc/donkeycar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ori.engineering/host-pc/donkeycar/</guid>
      <description>Install miniconda Python 3.7
  Install git
  Make a folder for your projects:
mkdir projectscd projects  Clone the Donkey repo:
git clone https://github.com/autorope/donkeycarcd donkeycargit checkout master  Create the Python anaconda env:
conda env create -f install\envs\windows.ymlconda activate donkeypip install -e .[pc]  Install Tensorflow GPU:
  Check the Software requirements for Nvidia GPUs
  Which basically means:</description>
    </item>
    
    <item>
      <title>Hardware inventory</title>
      <link>https://ori.engineering/hardware-assembly/inventory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ori.engineering/hardware-assembly/inventory/</guid>
      <description>Let’s start with a list of all of the hardware I’ll be using through this tutorial, and of course, with the money shot:
RC Car kit The RC Car I went with was the Tamiya TT-02, which came prebuilt and even included an receiver and a remote, for just a bit over 100€. Very lucky!
The reason I went with this is that it was just such a good deal for such a car.</description>
    </item>
    
    <item>
      <title>Jetson Nano installation</title>
      <link>https://ori.engineering/hardware-installation/jetson-nano-installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ori.engineering/hardware-installation/jetson-nano-installation/</guid>
      <description>We’ll begin by preparing installing the Jetson Nano image and setting up the software neccessary to connect it to the RC Car via the PCA Servo Driver.
Preparing the microSD The official Jetson Nano docs are great and you can just follow them until the Next Steps step.
 If you want a TL;DR version:
  Download the Jetson Nano Developer Kit SD Card Image
  Format your microSD card and then flash the image on it using whatever tool you’d like.</description>
    </item>
    
    <item>
      <title>Assembling the RC Car</title>
      <link>https://ori.engineering/hardware-assembly/building-the-car/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ori.engineering/hardware-assembly/building-the-car/</guid>
      <description>Now to the fun part: building the RC car. This will vary very much based on your RC Car kit. If it’s ready-to-run (RTR), you should be good out of the box. If it’s an unassembled kit, you’ve got a ton of work ahead, just follow the instructions that came with the car. If you’re like me, and got something in between, you’ll have just a bit of work before running it.</description>
    </item>
    
    <item>
      <title>Running the OS from an external SSD using a custom kernel</title>
      <link>https://ori.engineering/hardware-installation/kernel-hacking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ori.engineering/hardware-installation/kernel-hacking/</guid>
      <description>This is the technical, optional upgrade that will enable you to boot your OS from an external SSD.
Syonyk has an awesome Jetson Nano guide with all of this stuff explained and was the primary source of info while researching how to do this.
 JetsonHacks also have a guide that should make this much easier to do, as they’ve prepared scripts that do all of the work for you, but I haven’t tried it so I can’t say it works for sure, but it should!</description>
    </item>
    
    <item>
      <title>Simulator installation</title>
      <link>https://ori.engineering/host-pc/simulator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ori.engineering/host-pc/simulator/</guid>
      <description>Download and unzip the simulator for your platform from the DonkeyCar GitHub release page
  Place the simulator into your projects folder (where you cloned the Donkey repo)
  Install DonkeyGym:
cd ~/projectsgit clone https://github.com/tawnkramer/gym-donkeycarconda activate donkeypip install -e gym-donkeycar  Create a new donkey application for your simulator:
donkey createcar --path ~/mysimcd ~/mysim  Edit the myconfig.py file inside the application folder you just created (mysim):</description>
    </item>
    
    <item>
      <title>Building the mounting plates for the hardware</title>
      <link>https://ori.engineering/hardware-assembly/mounting-plates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ori.engineering/hardware-assembly/mounting-plates/</guid>
      <description>There are many options to go for when it comes to mounting your Nano and the rest of the hardware to your RC car.
Option 1: 3D printing If you’re planning on 3D printing your parts, take a look at:
 The official DonkeyCar docs which contain a lot of 3D models for printing: chassis and adapters, mounting plates, more mounting plates, etc. Markku.ai’s Chilicorn Rail for the Tamiya cars  I actually used the Chilicorn Rail for the first iteration of my build, and was very lucky to have been introduced by my mentor to Mitch, who printed out the parts and helped me out with a ton of stuff since then:</description>
    </item>
    
    <item>
      <title>Preparing the Jetson Nano</title>
      <link>https://ori.engineering/hardware-assembly/jetson-nano-installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ori.engineering/hardware-assembly/jetson-nano-installation/</guid>
      <description>Before we begin assembling our hardware together, we should first prepare our Jetson Nano by installing an OS on it and verifying everything works before it gets buried among all the other hardware on the RC.
Preparing the microSD First, we&#39;ll prepare the microSD by installing an OS on it for the Nano to run.
The official Jetson Nano docs are great and you can just follow them until the Next Steps step.</description>
    </item>
    
    <item>
      <title>Assembling the Jetson Nano</title>
      <link>https://ori.engineering/hardware-assembly/assembling-the-nano/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ori.engineering/hardware-assembly/assembling-the-nano/</guid>
      <description>Now we can finish up our Nano by connecting the WLAN card, microSD and the fan to it.
Plugging in the microSD I actually already did a lot of assembly some time ago, and I&#39;m writing this in retrospect, so don&#39;t be worried if my Nano has a lot of stuff already hooked up to it and if it looks a bit different than yours, just focus on the stuff we&#39;re going through and disregard the rest.</description>
    </item>
    
    <item>
      <title>Connecting the RC to the Nano</title>
      <link>https://ori.engineering/hardware-assembly/connecting-the-car-to-the-nano/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ori.engineering/hardware-assembly/connecting-the-car-to-the-nano/</guid>
      <description>Now comes the part that should differ the most, based on the RC you got. But don&#39;t worry, it&#39;s very much doable no matter the RC you got!
Finding your ESC/Servo The first thing you should do is find your ESC and your Servo connectors, which should be a three wire connector coming from your RC car.
If you&#39;ve bought a car that came with a wireless receiver, both the connectors should be connected to it.</description>
    </item>
    
  </channel>
</rss>